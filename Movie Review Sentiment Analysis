{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a83820fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:37.511131Z",
     "iopub.status.busy": "2023-07-07T07:33:37.510657Z",
     "iopub.status.idle": "2023-07-07T07:33:37.529929Z",
     "shell.execute_reply": "2023-07-07T07:33:37.528417Z"
    },
    "papermill": {
     "duration": 0.047908,
     "end_time": "2023-07-07T07:33:37.533129",
     "exception": false,
     "start_time": "2023-07-07T07:33:37.485221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/word2vec-nlp-tutorial/testData.tsv.zip\n",
      "/kaggle/input/word2vec-nlp-tutorial/sampleSubmission.csv\n",
      "/kaggle/input/word2vec-nlp-tutorial/unlabeledTrainData.tsv.zip\n",
      "/kaggle/input/word2vec-nlp-tutorial/labeledTrainData.tsv.zip\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c9571f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:37.578836Z",
     "iopub.status.busy": "2023-07-07T07:33:37.578395Z",
     "iopub.status.idle": "2023-07-07T07:33:54.401016Z",
     "shell.execute_reply": "2023-07-07T07:33:54.399456Z"
    },
    "papermill": {
     "duration": 16.848828,
     "end_time": "2023-07-07T07:33:54.404314",
     "exception": false,
     "start_time": "2023-07-07T07:33:37.555486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import string\n",
    "from sklearn import model_selection, metrics\n",
    "from transformers import AutoModelForSequenceClassification, AutoTokenizer, TrainingArguments, Trainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b55ad39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:54.451230Z",
     "iopub.status.busy": "2023-07-07T07:33:54.450253Z",
     "iopub.status.idle": "2023-07-07T07:33:56.093815Z",
     "shell.execute_reply": "2023-07-07T07:33:56.092541Z"
    },
    "papermill": {
     "duration": 1.671424,
     "end_time": "2023-07-07T07:33:56.097047",
     "exception": false,
     "start_time": "2023-07-07T07:33:54.425623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/word2vec-nlp-tutorial/labeledTrainData.tsv.zip', sep = '\\t')\n",
    "test = pd.read_csv('/kaggle/input/word2vec-nlp-tutorial/testData.tsv.zip', sep = '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2f2d5947",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.141883Z",
     "iopub.status.busy": "2023-07-07T07:33:56.141394Z",
     "iopub.status.idle": "2023-07-07T07:33:56.174352Z",
     "shell.execute_reply": "2023-07-07T07:33:56.172988Z"
    },
    "papermill": {
     "duration": 0.059185,
     "end_time": "2023-07-07T07:33:56.177624",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.118439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5814_8</td>\n",
       "      <td>1</td>\n",
       "      <td>With all this stuff going down at the moment w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2381_9</td>\n",
       "      <td>1</td>\n",
       "      <td>\\The Classic War of the Worlds\\\" by Timothy Hi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7759_3</td>\n",
       "      <td>0</td>\n",
       "      <td>The film starts with a manager (Nicholas Bell)...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3630_4</td>\n",
       "      <td>0</td>\n",
       "      <td>It must be assumed that those who praised this...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9495_8</td>\n",
       "      <td>1</td>\n",
       "      <td>Superbly trashy and wondrously unpretentious 8...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  sentiment                                             review\n",
       "0  5814_8          1  With all this stuff going down at the moment w...\n",
       "1  2381_9          1  \\The Classic War of the Worlds\\\" by Timothy Hi...\n",
       "2  7759_3          0  The film starts with a manager (Nicholas Bell)...\n",
       "3  3630_4          0  It must be assumed that those who praised this...\n",
       "4  9495_8          1  Superbly trashy and wondrously unpretentious 8..."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8925aa1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.223051Z",
     "iopub.status.busy": "2023-07-07T07:33:56.222534Z",
     "iopub.status.idle": "2023-07-07T07:33:56.236621Z",
     "shell.execute_reply": "2023-07-07T07:33:56.235289Z"
    },
    "papermill": {
     "duration": 0.040418,
     "end_time": "2023-07-07T07:33:56.239722",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.199304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    12500\n",
       "0    12500\n",
       "Name: sentiment, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['sentiment'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "978bc587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.286103Z",
     "iopub.status.busy": "2023-07-07T07:33:56.285161Z",
     "iopub.status.idle": "2023-07-07T07:33:56.293624Z",
     "shell.execute_reply": "2023-07-07T07:33:56.292429Z"
    },
    "papermill": {
     "duration": 0.034802,
     "end_time": "2023-07-07T07:33:56.296322",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.261520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((25000, 3), (25000, 2))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8b44af50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.341932Z",
     "iopub.status.busy": "2023-07-07T07:33:56.341458Z",
     "iopub.status.idle": "2023-07-07T07:33:56.354139Z",
     "shell.execute_reply": "2023-07-07T07:33:56.352289Z"
    },
    "papermill": {
     "duration": 0.039333,
     "end_time": "2023-07-07T07:33:56.357369",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.318036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train0=train[train['sentiment']==0]\n",
    "train1=train[train['sentiment']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7e49581b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.403697Z",
     "iopub.status.busy": "2023-07-07T07:33:56.403201Z",
     "iopub.status.idle": "2023-07-07T07:33:56.411519Z",
     "shell.execute_reply": "2023-07-07T07:33:56.410214Z"
    },
    "papermill": {
     "duration": 0.03481,
     "end_time": "2023-07-07T07:33:56.414182",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.379372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((12500, 3), (12500, 3))"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train0.shape, train1.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab0451a4",
   "metadata": {
    "papermill": {
     "duration": 0.02178,
     "end_time": "2023-07-07T07:33:56.458053",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.436273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Pre-processing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5150cf22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.505738Z",
     "iopub.status.busy": "2023-07-07T07:33:56.505262Z",
     "iopub.status.idle": "2023-07-07T07:33:56.842815Z",
     "shell.execute_reply": "2023-07-07T07:33:56.841371Z"
    },
    "papermill": {
     "duration": 0.365251,
     "end_time": "2023-07-07T07:33:56.846335",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.481084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Remove Hashtags\n",
    "train['review'].replace( { r\"#(\\w+)\" : '' }, inplace= True, regex = True)\n",
    "\n",
    "#Remove Mention\n",
    "train['review'].replace( { r\"@(\\w+)\" : '' }, inplace= True, regex = True)\n",
    "\n",
    "#Remove URL\n",
    "train['review'].astype(str).replace( { r\"http\\S+\" : '' }, inplace= True, regex = True)\n",
    "\n",
    "train['review']=train['review'].str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "54f47e4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:56.894033Z",
     "iopub.status.busy": "2023-07-07T07:33:56.893529Z",
     "iopub.status.idle": "2023-07-07T07:33:57.235636Z",
     "shell.execute_reply": "2023-07-07T07:33:57.234349Z"
    },
    "papermill": {
     "duration": 0.369197,
     "end_time": "2023-07-07T07:33:57.239127",
     "exception": false,
     "start_time": "2023-07-07T07:33:56.869930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Remove Hashtags\n",
    "test['review'].replace( { r\"#(\\w+)\" : '' }, inplace= True, regex = True)\n",
    "\n",
    "#Remove Mention\n",
    "test['review'].replace( { r\"@(\\w+)\" : '' }, inplace= True, regex = True)\n",
    "\n",
    "#Remove URL\n",
    "test['review'].astype(str).replace( { r\"http\\S+\" : '' }, inplace= True, regex = True)\n",
    "\n",
    "test['review']=test['review'].str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c03237fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:57.287110Z",
     "iopub.status.busy": "2023-07-07T07:33:57.286384Z",
     "iopub.status.idle": "2023-07-07T07:33:57.922134Z",
     "shell.execute_reply": "2023-07-07T07:33:57.920578Z"
    },
    "papermill": {
     "duration": 0.662616,
     "end_time": "2023-07-07T07:33:57.925539",
     "exception": false,
     "start_time": "2023-07-07T07:33:57.262923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import stopwords with nltk.\n",
    "from nltk.corpus import stopwords\n",
    "stop = stopwords.words('english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c59ea0c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:33:57.972233Z",
     "iopub.status.busy": "2023-07-07T07:33:57.971718Z",
     "iopub.status.idle": "2023-07-07T07:34:27.381373Z",
     "shell.execute_reply": "2023-07-07T07:34:27.379512Z"
    },
    "papermill": {
     "duration": 29.436904,
     "end_time": "2023-07-07T07:34:27.384767",
     "exception": false,
     "start_time": "2023-07-07T07:33:57.947863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['review'] = train['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n",
    "\n",
    "test['review'] = test['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "da3e1f4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:27.433513Z",
     "iopub.status.busy": "2023-07-07T07:34:27.432708Z",
     "iopub.status.idle": "2023-07-07T07:34:27.444843Z",
     "shell.execute_reply": "2023-07-07T07:34:27.443735Z"
    },
    "papermill": {
     "duration": 0.040098,
     "end_time": "2023-07-07T07:34:27.447463",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.407365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5814_8</td>\n",
       "      <td>1</td>\n",
       "      <td>stuff going moment mj i've started listening m...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2381_9</td>\n",
       "      <td>1</td>\n",
       "      <td>\\the classic war worlds\\\" timothy hines entert...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7759_3</td>\n",
       "      <td>0</td>\n",
       "      <td>film starts manager (nicholas bell) giving wel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3630_4</td>\n",
       "      <td>0</td>\n",
       "      <td>must assumed praised film (\\the greatest filme...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9495_8</td>\n",
       "      <td>1</td>\n",
       "      <td>superbly trashy wondrously unpretentious 80's ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  sentiment                                             review\n",
       "0  5814_8          1  stuff going moment mj i've started listening m...\n",
       "1  2381_9          1  \\the classic war worlds\\\" timothy hines entert...\n",
       "2  7759_3          0  film starts manager (nicholas bell) giving wel...\n",
       "3  3630_4          0  must assumed praised film (\\the greatest filme...\n",
       "4  9495_8          1  superbly trashy wondrously unpretentious 80's ..."
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f0afd5df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:27.495188Z",
     "iopub.status.busy": "2023-07-07T07:34:27.494391Z",
     "iopub.status.idle": "2023-07-07T07:34:27.506991Z",
     "shell.execute_reply": "2023-07-07T07:34:27.505884Z"
    },
    "papermill": {
     "duration": 0.039417,
     "end_time": "2023-07-07T07:34:27.509746",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.470329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12311_10</td>\n",
       "      <td>naturally film who's main themes mortality, no...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8348_2</td>\n",
       "      <td>movie disaster within disaster film. full grea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5828_4</td>\n",
       "      <td>all, movie kids. saw tonight child loved it. o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7186_2</td>\n",
       "      <td>afraid dark left impression several different ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12128_7</td>\n",
       "      <td>accurate depiction small time mob life filmed ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id                                             review\n",
       "0  12311_10  naturally film who's main themes mortality, no...\n",
       "1    8348_2  movie disaster within disaster film. full grea...\n",
       "2    5828_4  all, movie kids. saw tonight child loved it. o...\n",
       "3    7186_2  afraid dark left impression several different ...\n",
       "4   12128_7  accurate depiction small time mob life filmed ..."
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ce7d94ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:27.558020Z",
     "iopub.status.busy": "2023-07-07T07:34:27.556788Z",
     "iopub.status.idle": "2023-07-07T07:34:27.562439Z",
     "shell.execute_reply": "2023-07-07T07:34:27.561426Z"
    },
    "papermill": {
     "duration": 0.032461,
     "end_time": "2023-07-07T07:34:27.565117",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.532656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = train['sentiment']\n",
    "x = train['review']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d82efba",
   "metadata": {
    "papermill": {
     "duration": 0.022162,
     "end_time": "2023-07-07T07:34:27.609856",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.587694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Vectorization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d363c0a",
   "metadata": {
    "papermill": {
     "duration": 0.02201,
     "end_time": "2023-07-07T07:34:27.654769",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.632759",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## TF-IDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f40baff1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:27.703346Z",
     "iopub.status.busy": "2023-07-07T07:34:27.702563Z",
     "iopub.status.idle": "2023-07-07T07:34:27.708609Z",
     "shell.execute_reply": "2023-07-07T07:34:27.707479Z"
    },
    "papermill": {
     "duration": 0.033435,
     "end_time": "2023-07-07T07:34:27.711202",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.677767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import re \n",
    "import string\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "10151a1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:27.759062Z",
     "iopub.status.busy": "2023-07-07T07:34:27.757748Z",
     "iopub.status.idle": "2023-07-07T07:34:28.042942Z",
     "shell.execute_reply": "2023-07-07T07:34:28.041311Z"
    },
    "papermill": {
     "duration": 0.312682,
     "end_time": "2023-07-07T07:34:28.046236",
     "exception": false,
     "start_time": "2023-07-07T07:34:27.733554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating a word corpus for vectorization\n",
    "corpus = []\n",
    "for i in range(x.shape[0]):\n",
    "    corpus.append(x.iloc[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cba4dc33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:28.094130Z",
     "iopub.status.busy": "2023-07-07T07:34:28.092737Z",
     "iopub.status.idle": "2023-07-07T07:34:46.440548Z",
     "shell.execute_reply": "2023-07-07T07:34:46.438868Z"
    },
    "papermill": {
     "duration": 18.375349,
     "end_time": "2023-07-07T07:34:46.444163",
     "exception": false,
     "start_time": "2023-07-07T07:34:28.068814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "vectorizer1 = TfidfVectorizer(max_features=1000)\n",
    "X1 = vectorizer1.fit_transform(x)\n",
    "feature_names1 = vectorizer1.get_feature_names()\n",
    "denselist1 = X1.todense().tolist()\n",
    "train = pd.DataFrame(denselist1, columns=feature_names1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fd5cfab7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:46.492247Z",
     "iopub.status.busy": "2023-07-07T07:34:46.491117Z",
     "iopub.status.idle": "2023-07-07T07:34:46.626815Z",
     "shell.execute_reply": "2023-07-07T07:34:46.625513Z"
    },
    "papermill": {
     "duration": 0.162826,
     "end_time": "2023-07-07T07:34:46.629850",
     "exception": false,
     "start_time": "2023-07-07T07:34:46.467024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# splitting the training and testing part from the data\n",
    "X_temp, X_test, y_temp, y_test = train_test_split(train, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe4d2df3",
   "metadata": {
    "papermill": {
     "duration": 0.023166,
     "end_time": "2023-07-07T07:34:46.676078",
     "exception": false,
     "start_time": "2023-07-07T07:34:46.652912",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Testing with Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "940e3785",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:46.723845Z",
     "iopub.status.busy": "2023-07-07T07:34:46.723409Z",
     "iopub.status.idle": "2023-07-07T07:34:47.330724Z",
     "shell.execute_reply": "2023-07-07T07:34:47.329362Z"
    },
    "papermill": {
     "duration": 0.635215,
     "end_time": "2023-07-07T07:34:47.334123",
     "exception": false,
     "start_time": "2023-07-07T07:34:46.698908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8fd8f348",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:47.382209Z",
     "iopub.status.busy": "2023-07-07T07:34:47.381740Z",
     "iopub.status.idle": "2023-07-07T07:34:47.387946Z",
     "shell.execute_reply": "2023-07-07T07:34:47.386472Z"
    },
    "papermill": {
     "duration": 0.033945,
     "end_time": "2023-07-07T07:34:47.391045",
     "exception": false,
     "start_time": "2023-07-07T07:34:47.357100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "accuracy = {'TF-IDF':[], 'BoW': []}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d16bf18d",
   "metadata": {
    "papermill": {
     "duration": 0.021991,
     "end_time": "2023-07-07T07:34:47.436033",
     "exception": false,
     "start_time": "2023-07-07T07:34:47.414042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1984377a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:47.483429Z",
     "iopub.status.busy": "2023-07-07T07:34:47.482414Z",
     "iopub.status.idle": "2023-07-07T07:34:51.001791Z",
     "shell.execute_reply": "2023-07-07T07:34:50.999828Z"
    },
    "papermill": {
     "duration": 3.548712,
     "end_time": "2023-07-07T07:34:51.007134",
     "exception": false,
     "start_time": "2023-07-07T07:34:47.458422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2163  385]\n",
      " [ 309 2143]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.85      0.86      2548\n",
      "           1       0.85      0.87      0.86      2452\n",
      "\n",
      "    accuracy                           0.86      5000\n",
      "   macro avg       0.86      0.86      0.86      5000\n",
      "weighted avg       0.86      0.86      0.86      5000\n",
      "\n",
      "0.8612\n"
     ]
    }
   ],
   "source": [
    "#TF-IDF\n",
    "regressor_LR_tf = LogisticRegression(C=1.0,penalty='l2',solver='newton-cg')\n",
    "regressor_LR_tf.fit(X_temp, y_temp)\n",
    "y_predict_LR_tf = regressor_LR_tf.predict(X_test)\n",
    "a=(regressor_LR_tf.score(X_test, y_test))\n",
    "accuracy['TF-IDF'].append(a)\n",
    "\n",
    "print(metrics.confusion_matrix(y_test, y_predict_LR_tf))\n",
    "print(metrics.classification_report(y_test, y_predict_LR_tf))\n",
    "print(metrics.accuracy_score(y_test, y_predict_LR_tf))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2a2d76d",
   "metadata": {
    "papermill": {
     "duration": 0.039095,
     "end_time": "2023-07-07T07:34:51.094368",
     "exception": false,
     "start_time": "2023-07-07T07:34:51.055273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8c29e37a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:51.141907Z",
     "iopub.status.busy": "2023-07-07T07:34:51.141477Z",
     "iopub.status.idle": "2023-07-07T07:34:51.772743Z",
     "shell.execute_reply": "2023-07-07T07:34:51.770926Z"
    },
    "papermill": {
     "duration": 0.659192,
     "end_time": "2023-07-07T07:34:51.776478",
     "exception": false,
     "start_time": "2023-07-07T07:34:51.117286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1094 1454]\n",
      " [ 277 2175]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.43      0.56      2548\n",
      "           1       0.60      0.89      0.72      2452\n",
      "\n",
      "    accuracy                           0.65      5000\n",
      "   macro avg       0.70      0.66      0.64      5000\n",
      "weighted avg       0.70      0.65      0.64      5000\n",
      "\n",
      "0.6538\n"
     ]
    }
   ],
   "source": [
    "#TF-IDF\n",
    "model_DT_tf = DecisionTreeClassifier(criterion = 'gini', max_depth=2) \n",
    "model_DT_tf.fit(X_temp, y_temp)\n",
    "y_predict_DT_tf = model_DT_tf.predict(X_test)\n",
    "a=(model_DT_tf.score(X_test,y_test))\n",
    "accuracy['TF-IDF'].append(a)\n",
    "\n",
    "print(metrics.confusion_matrix(y_test, y_predict_DT_tf))\n",
    "print(metrics.classification_report(y_test, y_predict_DT_tf))\n",
    "print(metrics.accuracy_score(y_test, y_predict_DT_tf))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2694a0d6",
   "metadata": {
    "papermill": {
     "duration": 0.023168,
     "end_time": "2023-07-07T07:34:51.825777",
     "exception": false,
     "start_time": "2023-07-07T07:34:51.802609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e7786c16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:34:51.873244Z",
     "iopub.status.busy": "2023-07-07T07:34:51.872805Z",
     "iopub.status.idle": "2023-07-07T07:35:55.209858Z",
     "shell.execute_reply": "2023-07-07T07:35:55.208231Z"
    },
    "papermill": {
     "duration": 63.386302,
     "end_time": "2023-07-07T07:35:55.234834",
     "exception": false,
     "start_time": "2023-07-07T07:34:51.848532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1928  620]\n",
      " [ 330 2122]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.76      0.80      2548\n",
      "           1       0.77      0.87      0.82      2452\n",
      "\n",
      "    accuracy                           0.81      5000\n",
      "   macro avg       0.81      0.81      0.81      5000\n",
      "weighted avg       0.81      0.81      0.81      5000\n",
      "\n",
      "0.81\n"
     ]
    }
   ],
   "source": [
    "#TF-IDF\n",
    "model_GB_tf = GradientBoostingClassifier(learning_rate= 0.1, max_depth=3, n_estimators= 100,subsample=1.0) \n",
    "model_GB_tf.fit(X_temp, y_temp)\n",
    "y_predict_GB_tf = model_GB_tf.predict(X_test)\n",
    "a=(model_GB_tf.score(X_test,y_test))\n",
    "accuracy['TF-IDF'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_GB_tf))\n",
    "print(metrics.classification_report(y_test, y_predict_GB_tf))\n",
    "print(metrics.accuracy_score(y_test, y_predict_GB_tf))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "100e9131",
   "metadata": {
    "papermill": {
     "duration": 0.022671,
     "end_time": "2023-07-07T07:35:55.281098",
     "exception": false,
     "start_time": "2023-07-07T07:35:55.258427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "27154df3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:35:55.329860Z",
     "iopub.status.busy": "2023-07-07T07:35:55.328921Z",
     "iopub.status.idle": "2023-07-07T07:36:05.329413Z",
     "shell.execute_reply": "2023-07-07T07:36:05.327817Z"
    },
    "papermill": {
     "duration": 10.028524,
     "end_time": "2023-07-07T07:36:05.332537",
     "exception": false,
     "start_time": "2023-07-07T07:35:55.304013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2126  422]\n",
      " [ 381 2071]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.83      0.84      2548\n",
      "           1       0.83      0.84      0.84      2452\n",
      "\n",
      "    accuracy                           0.84      5000\n",
      "   macro avg       0.84      0.84      0.84      5000\n",
      "weighted avg       0.84      0.84      0.84      5000\n",
      "\n",
      "0.8394\n"
     ]
    }
   ],
   "source": [
    "#TF-IDF\n",
    "model_RF_tf = RandomForestClassifier(n_estimators= 100, max_features = 'log2')\n",
    "model_RF_tf.fit(X_temp, y_temp)\n",
    "y_predict_RF_tf = model_RF_tf.predict(X_test)\n",
    "a=(model_RF_tf.score(X_test,y_test))\n",
    "accuracy['TF-IDF'].append(a)\n",
    "\n",
    "print(metrics.confusion_matrix(y_test, y_predict_RF_tf))\n",
    "print(metrics.classification_report(y_test, y_predict_RF_tf))\n",
    "print(metrics.accuracy_score(y_test, y_predict_RF_tf))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6be6318",
   "metadata": {
    "papermill": {
     "duration": 0.02265,
     "end_time": "2023-07-07T07:36:05.378456",
     "exception": false,
     "start_time": "2023-07-07T07:36:05.355806",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### K Nearest Neighbours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f3189546",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:36:05.426334Z",
     "iopub.status.busy": "2023-07-07T07:36:05.425861Z",
     "iopub.status.idle": "2023-07-07T07:44:51.748180Z",
     "shell.execute_reply": "2023-07-07T07:44:51.746530Z"
    },
    "papermill": {
     "duration": 526.37907,
     "end_time": "2023-07-07T07:44:51.780518",
     "exception": false,
     "start_time": "2023-07-07T07:36:05.401448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 565 1983]\n",
      " [ 218 2234]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.22      0.34      2548\n",
      "           1       0.53      0.91      0.67      2452\n",
      "\n",
      "    accuracy                           0.56      5000\n",
      "   macro avg       0.63      0.57      0.50      5000\n",
      "weighted avg       0.63      0.56      0.50      5000\n",
      "\n",
      "0.5598\n"
     ]
    }
   ],
   "source": [
    "#TF-IDF\n",
    "model_KN_tf = KNeighborsClassifier(metric= 'manhattan', n_neighbors= 5, weights= 'distance') \n",
    "model_KN_tf.fit(X_temp, y_temp)\n",
    "y_predict_KN_tf = model_KN_tf.predict(X_test)\n",
    "a=(model_KN_tf.score(X_test,y_test))\n",
    "accuracy['TF-IDF'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_KN_tf))\n",
    "print(metrics.classification_report(y_test, y_predict_KN_tf))\n",
    "print(metrics.accuracy_score(y_test, y_predict_KN_tf))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb6255db",
   "metadata": {
    "papermill": {
     "duration": 0.023129,
     "end_time": "2023-07-07T07:44:51.827336",
     "exception": false,
     "start_time": "2023-07-07T07:44:51.804207",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## BoW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "19eb8e84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:51.877514Z",
     "iopub.status.busy": "2023-07-07T07:44:51.876848Z",
     "iopub.status.idle": "2023-07-07T07:44:52.584155Z",
     "shell.execute_reply": "2023-07-07T07:44:52.582789Z"
    },
    "papermill": {
     "duration": 0.73675,
     "end_time": "2023-07-07T07:44:52.587306",
     "exception": false,
     "start_time": "2023-07-07T07:44:51.850556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/word2vec-nlp-tutorial/labeledTrainData.tsv.zip', sep = '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5ed53038",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:52.635615Z",
     "iopub.status.busy": "2023-07-07T07:44:52.635158Z",
     "iopub.status.idle": "2023-07-07T07:44:52.647701Z",
     "shell.execute_reply": "2023-07-07T07:44:52.646303Z"
    },
    "papermill": {
     "duration": 0.039842,
     "end_time": "2023-07-07T07:44:52.650407",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.610565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5814_8</td>\n",
       "      <td>1</td>\n",
       "      <td>With all this stuff going down at the moment w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2381_9</td>\n",
       "      <td>1</td>\n",
       "      <td>\\The Classic War of the Worlds\\\" by Timothy Hi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7759_3</td>\n",
       "      <td>0</td>\n",
       "      <td>The film starts with a manager (Nicholas Bell)...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3630_4</td>\n",
       "      <td>0</td>\n",
       "      <td>It must be assumed that those who praised this...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9495_8</td>\n",
       "      <td>1</td>\n",
       "      <td>Superbly trashy and wondrously unpretentious 8...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  sentiment                                             review\n",
       "0  5814_8          1  With all this stuff going down at the moment w...\n",
       "1  2381_9          1  \\The Classic War of the Worlds\\\" by Timothy Hi...\n",
       "2  7759_3          0  The film starts with a manager (Nicholas Bell)...\n",
       "3  3630_4          0  It must be assumed that those who praised this...\n",
       "4  9495_8          1  Superbly trashy and wondrously unpretentious 8..."
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "72638eb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:52.699129Z",
     "iopub.status.busy": "2023-07-07T07:44:52.698632Z",
     "iopub.status.idle": "2023-07-07T07:44:52.706397Z",
     "shell.execute_reply": "2023-07-07T07:44:52.705316Z"
    },
    "papermill": {
     "duration": 0.035496,
     "end_time": "2023-07-07T07:44:52.709249",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.673753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train=train.drop(['id'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "474dcc76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:52.758264Z",
     "iopub.status.busy": "2023-07-07T07:44:52.757256Z",
     "iopub.status.idle": "2023-07-07T07:44:52.764693Z",
     "shell.execute_reply": "2023-07-07T07:44:52.763806Z"
    },
    "papermill": {
     "duration": 0.034494,
     "end_time": "2023-07-07T07:44:52.767166",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.732672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dff = train.drop(['sentiment'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cbbb0fe6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:52.816080Z",
     "iopub.status.busy": "2023-07-07T07:44:52.815606Z",
     "iopub.status.idle": "2023-07-07T07:44:52.840660Z",
     "shell.execute_reply": "2023-07-07T07:44:52.839247Z"
    },
    "papermill": {
     "duration": 0.053493,
     "end_time": "2023-07-07T07:44:52.843832",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.790339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_temp, X_test, y_temp, y_test = train_test_split(dff, list(train.sentiment), test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5927f4a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:52.893799Z",
     "iopub.status.busy": "2023-07-07T07:44:52.893306Z",
     "iopub.status.idle": "2023-07-07T07:44:52.902065Z",
     "shell.execute_reply": "2023-07-07T07:44:52.900734Z"
    },
    "papermill": {
     "duration": 0.037193,
     "end_time": "2023-07-07T07:44:52.904810",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.867617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5000, 1), (20000, 1), 5000, 20000)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape, X_temp.shape, len(y_test), len(y_temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3e576d1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:52.954640Z",
     "iopub.status.busy": "2023-07-07T07:44:52.954188Z",
     "iopub.status.idle": "2023-07-07T07:44:52.970422Z",
     "shell.execute_reply": "2023-07-07T07:44:52.969267Z"
    },
    "papermill": {
     "duration": 0.044668,
     "end_time": "2023-07-07T07:44:52.972843",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.928175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_temp['label'] = y_temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a8f63bdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.021582Z",
     "iopub.status.busy": "2023-07-07T07:44:53.021101Z",
     "iopub.status.idle": "2023-07-07T07:44:53.032784Z",
     "shell.execute_reply": "2023-07-07T07:44:53.031806Z"
    },
    "papermill": {
     "duration": 0.039576,
     "end_time": "2023-07-07T07:44:53.035739",
     "exception": false,
     "start_time": "2023-07-07T07:44:52.996163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14505</th>\n",
       "      <td>I like movies about UFOs, which is why I recen...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2937</th>\n",
       "      <td>I watched \\Elephant Walk\\\" for the first time ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13887</th>\n",
       "      <td>How sad there is no option to post a mark lowe...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5675</th>\n",
       "      <td>Just okay film about a woman who is a twin hav...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9986</th>\n",
       "      <td>This is a family film, which to some people is...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  review  label\n",
       "14505  I like movies about UFOs, which is why I recen...      0\n",
       "2937   I watched \\Elephant Walk\\\" for the first time ...      1\n",
       "13887  How sad there is no option to post a mark lowe...      0\n",
       "5675   Just okay film about a woman who is a twin hav...      0\n",
       "9986   This is a family film, which to some people is...      1"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_temp.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "fd05a27f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.085765Z",
     "iopub.status.busy": "2023-07-07T07:44:53.085300Z",
     "iopub.status.idle": "2023-07-07T07:44:53.096137Z",
     "shell.execute_reply": "2023-07-07T07:44:53.094848Z"
    },
    "papermill": {
     "duration": 0.038755,
     "end_time": "2023-07-07T07:44:53.099003",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.060248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10015"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zero = X_temp[X_temp['label'] == 0]\n",
    "zero.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3aef8936",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.148801Z",
     "iopub.status.busy": "2023-07-07T07:44:53.148325Z",
     "iopub.status.idle": "2023-07-07T07:44:53.159232Z",
     "shell.execute_reply": "2023-07-07T07:44:53.157678Z"
    },
    "papermill": {
     "duration": 0.039274,
     "end_time": "2023-07-07T07:44:53.162050",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.122776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9985"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one = X_temp[X_temp['label'] == 1]\n",
    "one.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b0291778",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.214387Z",
     "iopub.status.busy": "2023-07-07T07:44:53.213753Z",
     "iopub.status.idle": "2023-07-07T07:44:53.224154Z",
     "shell.execute_reply": "2023-07-07T07:44:53.222854Z"
    },
    "papermill": {
     "duration": 0.039808,
     "end_time": "2023-07-07T07:44:53.227138",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.187330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ds = pd.concat([zero,one], axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3ce0cc1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.276750Z",
     "iopub.status.busy": "2023-07-07T07:44:53.276332Z",
     "iopub.status.idle": "2023-07-07T07:44:53.291511Z",
     "shell.execute_reply": "2023-07-07T07:44:53.290592Z"
    },
    "papermill": {
     "duration": 0.04324,
     "end_time": "2023-07-07T07:44:53.294284",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.251044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14505</th>\n",
       "      <td>I like movies about UFOs, which is why I recen...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13887</th>\n",
       "      <td>How sad there is no option to post a mark lowe...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5675</th>\n",
       "      <td>Just okay film about a woman who is a twin hav...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22050</th>\n",
       "      <td>As soon as I began to see posters and hear tal...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17553</th>\n",
       "      <td>This movie has successfully proved what we all...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21648</th>\n",
       "      <td>(spoilers?)&lt;br /&gt;&lt;br /&gt;while the historical ac...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22695</th>\n",
       "      <td>Well this movie was probobly one of the funnie...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23634</th>\n",
       "      <td>Elvira Mistress of the Dark is just that, a ca...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3479</th>\n",
       "      <td>I must admit that I had my doubts about this m...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20897</th>\n",
       "      <td>When i first saw the title i was already deduc...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  review  label\n",
       "14505  I like movies about UFOs, which is why I recen...      0\n",
       "13887  How sad there is no option to post a mark lowe...      0\n",
       "5675   Just okay film about a woman who is a twin hav...      0\n",
       "22050  As soon as I began to see posters and hear tal...      0\n",
       "17553  This movie has successfully proved what we all...      0\n",
       "...                                                  ...    ...\n",
       "21648  (spoilers?)<br /><br />while the historical ac...      1\n",
       "22695  Well this movie was probobly one of the funnie...      1\n",
       "23634  Elvira Mistress of the Dark is just that, a ca...      1\n",
       "3479   I must admit that I had my doubts about this m...      1\n",
       "20897  When i first saw the title i was already deduc...      1\n",
       "\n",
       "[20000 rows x 2 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "56f897ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.346525Z",
     "iopub.status.busy": "2023-07-07T07:44:53.346033Z",
     "iopub.status.idle": "2023-07-07T07:44:53.358459Z",
     "shell.execute_reply": "2023-07-07T07:44:53.356926Z"
    },
    "papermill": {
     "duration": 0.041899,
     "end_time": "2023-07-07T07:44:53.361673",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.319774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5000, 2)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testdf = X_test\n",
    "testdf['label'] = y_test\n",
    "testdf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f9c76469",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.413458Z",
     "iopub.status.busy": "2023-07-07T07:44:53.412999Z",
     "iopub.status.idle": "2023-07-07T07:44:53.425078Z",
     "shell.execute_reply": "2023-07-07T07:44:53.423705Z"
    },
    "papermill": {
     "duration": 0.041682,
     "end_time": "2023-07-07T07:44:53.427897",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.386215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2485, 2515)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(testdf[testdf['label']==0]),len(testdf[testdf['label']==1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b7d523d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.479059Z",
     "iopub.status.busy": "2023-07-07T07:44:53.478336Z",
     "iopub.status.idle": "2023-07-07T07:44:53.486565Z",
     "shell.execute_reply": "2023-07-07T07:44:53.485611Z"
    },
    "papermill": {
     "duration": 0.03677,
     "end_time": "2023-07-07T07:44:53.489124",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.452354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ds = pd.concat([ds, testdf], axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f71dd155",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.542375Z",
     "iopub.status.busy": "2023-07-07T07:44:53.539786Z",
     "iopub.status.idle": "2023-07-07T07:44:53.554466Z",
     "shell.execute_reply": "2023-07-07T07:44:53.553060Z"
    },
    "papermill": {
     "duration": 0.043449,
     "end_time": "2023-07-07T07:44:53.557232",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.513783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((12500, 2), (12500, 2))"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds[ds['label']==0].shape, ds[ds['label']==1].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "941b2427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:53.609783Z",
     "iopub.status.busy": "2023-07-07T07:44:53.608646Z",
     "iopub.status.idle": "2023-07-07T07:44:57.054955Z",
     "shell.execute_reply": "2023-07-07T07:44:57.053670Z"
    },
    "papermill": {
     "duration": 3.475973,
     "end_time": "2023-07-07T07:44:57.058166",
     "exception": false,
     "start_time": "2023-07-07T07:44:53.582193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "corpus = []\n",
    "for i in range(ds.shape[0]):\n",
    "    corpus.append(ds.iloc[i][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "094645a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:44:57.112678Z",
     "iopub.status.busy": "2023-07-07T07:44:57.112242Z",
     "iopub.status.idle": "2023-07-07T07:45:04.803517Z",
     "shell.execute_reply": "2023-07-07T07:45:04.802504Z"
    },
    "papermill": {
     "duration": 7.72225,
     "end_time": "2023-07-07T07:45:04.806089",
     "exception": false,
     "start_time": "2023-07-07T07:44:57.083839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "vectorizer_train = CountVectorizer(max_features=1000)\n",
    "vocabulary_train = vectorizer_train.fit_transform(corpus)\n",
    "bow = pd.DataFrame(vocabulary_train.toarray(), columns = vectorizer_train.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "257e9136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:04.859237Z",
     "iopub.status.busy": "2023-07-07T07:45:04.858748Z",
     "iopub.status.idle": "2023-07-07T07:45:04.881634Z",
     "shell.execute_reply": "2023-07-07T07:45:04.880325Z"
    },
    "papermill": {
     "duration": 0.05397,
     "end_time": "2023-07-07T07:45:04.885214",
     "exception": false,
     "start_time": "2023-07-07T07:45:04.831244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bow['labelxyz'] = list(ds.label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "95a48682",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:04.937980Z",
     "iopub.status.busy": "2023-07-07T07:45:04.937480Z",
     "iopub.status.idle": "2023-07-07T07:45:05.513661Z",
     "shell.execute_reply": "2023-07-07T07:45:05.512406Z"
    },
    "papermill": {
     "duration": 0.606043,
     "end_time": "2023-07-07T07:45:05.516862",
     "exception": false,
     "start_time": "2023-07-07T07:45:04.910819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bow_zero = bow[bow.labelxyz == 0]\n",
    "bow_one = bow[bow.labelxyz == 1]\n",
    "\n",
    "X_train_zero = bow_zero.sample(frac=0.8, random_state=0)\n",
    "X_test_zero = bow_zero.drop(X_train_zero.index)\n",
    "X_train_one = bow_one.sample(frac=0.8, random_state=0)\n",
    "X_test_one = bow_one.drop(X_train_one.index)\n",
    "\n",
    "X_train_df = pd.concat([X_train_zero, X_train_one], axis = 0)\n",
    "bow_train = X_train_df.drop(['labelxyz'], axis = 1)\n",
    "y_train = list(X_train_df.labelxyz)\n",
    "X_test_df = pd.concat([X_test_zero, X_test_one], axis = 0)\n",
    "bow_test = X_test_df.drop(['labelxyz'], axis = 1)\n",
    "y_test = list(X_test_df.labelxyz)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85ae4477",
   "metadata": {
    "papermill": {
     "duration": 0.025274,
     "end_time": "2023-07-07T07:45:05.567120",
     "exception": false,
     "start_time": "2023-07-07T07:45:05.541846",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Testing with Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "20ee20cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:05.620437Z",
     "iopub.status.busy": "2023-07-07T07:45:05.619956Z",
     "iopub.status.idle": "2023-07-07T07:45:05.631776Z",
     "shell.execute_reply": "2023-07-07T07:45:05.630740Z"
    },
    "papermill": {
     "duration": 0.041573,
     "end_time": "2023-07-07T07:45:05.634505",
     "exception": false,
     "start_time": "2023-07-07T07:45:05.592932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb1efbbf",
   "metadata": {
    "papermill": {
     "duration": 0.024788,
     "end_time": "2023-07-07T07:45:05.684172",
     "exception": false,
     "start_time": "2023-07-07T07:45:05.659384",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "0cf2c3db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:05.736148Z",
     "iopub.status.busy": "2023-07-07T07:45:05.735381Z",
     "iopub.status.idle": "2023-07-07T07:45:09.268883Z",
     "shell.execute_reply": "2023-07-07T07:45:09.267480Z"
    },
    "papermill": {
     "duration": 3.564916,
     "end_time": "2023-07-07T07:45:09.273770",
     "exception": false,
     "start_time": "2023-07-07T07:45:05.708854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2126  374]\n",
      " [ 327 2173]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.85      0.86      2500\n",
      "           1       0.85      0.87      0.86      2500\n",
      "\n",
      "    accuracy                           0.86      5000\n",
      "   macro avg       0.86      0.86      0.86      5000\n",
      "weighted avg       0.86      0.86      0.86      5000\n",
      "\n",
      "0.8598\n"
     ]
    }
   ],
   "source": [
    "#BOW\n",
    "regressor_LR_bow = LogisticRegression(C= 1.0, penalty='l2', solver= 'liblinear')\n",
    "regressor_LR_bow.fit(bow_train,y_train)\n",
    "y_predict_LR_bow = regressor_LR_bow.predict(bow_test)\n",
    "a=(regressor_LR_bow.score(bow_test,y_test))\n",
    "accuracy['BoW'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_LR_bow))\n",
    "print(metrics.classification_report(y_test, y_predict_LR_bow))\n",
    "print(metrics.accuracy_score(y_test, y_predict_LR_bow))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bc9d650",
   "metadata": {
    "papermill": {
     "duration": 0.02876,
     "end_time": "2023-07-07T07:45:09.358442",
     "exception": false,
     "start_time": "2023-07-07T07:45:09.329682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "9626e1fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:09.410520Z",
     "iopub.status.busy": "2023-07-07T07:45:09.410074Z",
     "iopub.status.idle": "2023-07-07T07:45:09.848791Z",
     "shell.execute_reply": "2023-07-07T07:45:09.847116Z"
    },
    "papermill": {
     "duration": 0.468292,
     "end_time": "2023-07-07T07:45:09.851937",
     "exception": false,
     "start_time": "2023-07-07T07:45:09.383645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1083 1417]\n",
      " [ 347 2153]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.43      0.55      2500\n",
      "           1       0.60      0.86      0.71      2500\n",
      "\n",
      "    accuracy                           0.65      5000\n",
      "   macro avg       0.68      0.65      0.63      5000\n",
      "weighted avg       0.68      0.65      0.63      5000\n",
      "\n",
      "0.6472\n"
     ]
    }
   ],
   "source": [
    "model_DT_bow = DecisionTreeClassifier(criterion= 'gini', max_depth= 2) \n",
    "model_DT_bow.fit(bow_train,y_train)\n",
    "y_predict_DT_bow = model_DT_bow.predict(bow_test)\n",
    "a=(model_DT_bow.score(bow_test,y_test))\n",
    "accuracy['BoW'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_DT_bow))\n",
    "print(metrics.classification_report(y_test, y_predict_DT_bow))\n",
    "print(metrics.accuracy_score(y_test, y_predict_DT_bow))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2cc3fcc",
   "metadata": {
    "papermill": {
     "duration": 0.025285,
     "end_time": "2023-07-07T07:45:09.903094",
     "exception": false,
     "start_time": "2023-07-07T07:45:09.877809",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c4dbbf62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:09.956199Z",
     "iopub.status.busy": "2023-07-07T07:45:09.955355Z",
     "iopub.status.idle": "2023-07-07T07:45:46.517127Z",
     "shell.execute_reply": "2023-07-07T07:45:46.515721Z"
    },
    "papermill": {
     "duration": 36.616535,
     "end_time": "2023-07-07T07:45:46.544752",
     "exception": false,
     "start_time": "2023-07-07T07:45:09.928217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1887  613]\n",
      " [ 349 2151]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.75      0.80      2500\n",
      "           1       0.78      0.86      0.82      2500\n",
      "\n",
      "    accuracy                           0.81      5000\n",
      "   macro avg       0.81      0.81      0.81      5000\n",
      "weighted avg       0.81      0.81      0.81      5000\n",
      "\n",
      "0.8076\n"
     ]
    }
   ],
   "source": [
    "#BOW\n",
    "model_GB_bow = GradientBoostingClassifier(learning_rate= 0.1, max_depth= 3, n_estimators= 100, subsample= 1.0)\n",
    "model_GB_bow.fit(bow_train,y_train)\n",
    "y_predict_GB_bow = model_GB_bow.predict(bow_test)\n",
    "a=(model_GB_bow.score(bow_test,y_test))\n",
    "accuracy['BoW'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_GB_bow))\n",
    "print(metrics.classification_report(y_test, y_predict_GB_bow))\n",
    "print(metrics.accuracy_score(y_test, y_predict_GB_bow))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d94feac",
   "metadata": {
    "papermill": {
     "duration": 0.025732,
     "end_time": "2023-07-07T07:45:46.595499",
     "exception": false,
     "start_time": "2023-07-07T07:45:46.569767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "742f3ed7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:45:46.649618Z",
     "iopub.status.busy": "2023-07-07T07:45:46.649168Z",
     "iopub.status.idle": "2023-07-07T07:48:26.156678Z",
     "shell.execute_reply": "2023-07-07T07:48:26.154942Z"
    },
    "papermill": {
     "duration": 159.563506,
     "end_time": "2023-07-07T07:48:26.184239",
     "exception": false,
     "start_time": "2023-07-07T07:45:46.620733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2053  447]\n",
      " [ 374 2126]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.82      0.83      2500\n",
      "           1       0.83      0.85      0.84      2500\n",
      "\n",
      "    accuracy                           0.84      5000\n",
      "   macro avg       0.84      0.84      0.84      5000\n",
      "weighted avg       0.84      0.84      0.84      5000\n",
      "\n",
      "0.8358\n"
     ]
    }
   ],
   "source": [
    "#BOW\n",
    "model_RF_bow = RandomForestClassifier(max_features='sqrt', n_estimators= 1000)\n",
    "model_RF_bow.fit(bow_train,y_train)\n",
    "y_predict_RF_bow = model_RF_bow.predict(bow_test)\n",
    "a=(model_RF_bow.score(bow_test,y_test))\n",
    "accuracy['BoW'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_RF_bow))\n",
    "print(metrics.classification_report(y_test, y_predict_RF_bow))\n",
    "print(metrics.accuracy_score(y_test, y_predict_RF_bow))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54d7c500",
   "metadata": {
    "papermill": {
     "duration": 0.025931,
     "end_time": "2023-07-07T07:48:26.236490",
     "exception": false,
     "start_time": "2023-07-07T07:48:26.210559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### K neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6b7d8ade",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:48:26.292617Z",
     "iopub.status.busy": "2023-07-07T07:48:26.291811Z",
     "iopub.status.idle": "2023-07-07T07:48:37.067077Z",
     "shell.execute_reply": "2023-07-07T07:48:37.065717Z"
    },
    "papermill": {
     "duration": 10.805571,
     "end_time": "2023-07-07T07:48:37.069788",
     "exception": false,
     "start_time": "2023-07-07T07:48:26.264217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1179 1321]\n",
      " [ 497 2003]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.70      0.47      0.56      2500\n",
      "           1       0.60      0.80      0.69      2500\n",
      "\n",
      "    accuracy                           0.64      5000\n",
      "   macro avg       0.65      0.64      0.63      5000\n",
      "weighted avg       0.65      0.64      0.63      5000\n",
      "\n",
      "0.6364\n"
     ]
    }
   ],
   "source": [
    "#BOW\n",
    "model_KN_bow = KNeighborsClassifier(metric= 'euclidean', n_neighbors= 19, weights= 'distance') \n",
    "model_KN_bow.fit(bow_train,y_train)\n",
    "y_predict_KN_bow = model_KN_bow.predict(bow_test)\n",
    "a=(model_KN_bow.score(bow_test,y_test))\n",
    "accuracy['BoW'].append(a)\n",
    "print(metrics.confusion_matrix(y_test, y_predict_KN_bow))\n",
    "print(metrics.classification_report(y_test, y_predict_KN_bow))\n",
    "print(metrics.accuracy_score(y_test, y_predict_KN_bow))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cf437d4",
   "metadata": {
    "papermill": {
     "duration": 0.025226,
     "end_time": "2023-07-07T07:48:37.120399",
     "exception": false,
     "start_time": "2023-07-07T07:48:37.095173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Basic Models Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "07b8ada1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:48:37.175225Z",
     "iopub.status.busy": "2023-07-07T07:48:37.174319Z",
     "iopub.status.idle": "2023-07-07T07:48:37.190986Z",
     "shell.execute_reply": "2023-07-07T07:48:37.189545Z"
    },
    "papermill": {
     "duration": 0.048424,
     "end_time": "2023-07-07T07:48:37.194051",
     "exception": false,
     "start_time": "2023-07-07T07:48:37.145627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>TF-IDF accuracy</th>\n",
       "      <th>BoW accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LR</td>\n",
       "      <td>0.8612</td>\n",
       "      <td>0.8598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DT</td>\n",
       "      <td>0.6538</td>\n",
       "      <td>0.6472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GB</td>\n",
       "      <td>0.8100</td>\n",
       "      <td>0.8076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RF</td>\n",
       "      <td>0.8394</td>\n",
       "      <td>0.8358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>KN</td>\n",
       "      <td>0.5598</td>\n",
       "      <td>0.6364</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  model  TF-IDF accuracy  BoW accuracy\n",
       "0    LR           0.8612        0.8598\n",
       "1    DT           0.6538        0.6472\n",
       "2    GB           0.8100        0.8076\n",
       "3    RF           0.8394        0.8358\n",
       "4    KN           0.5598        0.6364"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ['LR','DT','GB','RF','KN']\n",
    "data = {'model':model,'TF-IDF accuracy':accuracy['TF-IDF'], 'BoW accuracy':accuracy['BoW']}\n",
    "compare_models = pd.DataFrame(data)\n",
    "compare_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d07f9c93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-07T07:48:37.248361Z",
     "iopub.status.busy": "2023-07-07T07:48:37.247600Z",
     "iopub.status.idle": "2023-07-07T07:48:38.109307Z",
     "shell.execute_reply": "2023-07-07T07:48:38.108273Z"
    },
    "papermill": {
     "duration": 0.892208,
     "end_time": "2023-07-07T07:48:38.112344",
     "exception": false,
     "start_time": "2023-07-07T07:48:37.220136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_axis = np.arange(len(compare_models['model']))\n",
    "  \n",
    "plt.bar(X_axis - 0.2, compare_models['TF-IDF accuracy'], 0.4, label = 'TF-IDF')\n",
    "plt.bar(X_axis + 0.2, compare_models['BoW accuracy'], 0.4, label = 'BoW')\n",
    "  \n",
    "plt.xticks(X_axis, compare_models['model'])\n",
    "plt.xlabel(\"Groups\")\n",
    "plt.ylabel(\"Number of Students\")\n",
    "plt.title(\"Comparitive Accuracy for Two Vectorization Technique \")\n",
    "plt.legend()\n",
    "plt.savefig('Comparitive Accuracy for Two Vectorization Technique.pdf', bbox_inches='tight')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 918.27589,
   "end_time": "2023-07-07T07:48:41.432946",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-07-07T07:33:23.157056",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
